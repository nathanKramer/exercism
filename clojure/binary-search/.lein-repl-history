[1 2 3 4 5 6]
(let [vec [1 2 3 4 5 6]])
vec
(let [v 5] v)
(let [v [1 2 3 4 5 6]]
(len v)
)
(size [1 2]_
(size [ 1 2 ])
(length [1 2])
(count [1 2])
(/ 6 2)
(/7 2)
(/ 7 2)
(num (/ 7 2)
)
(int (/ 7 2))
(load-file "src/binary-search.clj"
)
(load-file "src/binary_search.clj")
(binary-search/middle 7)
(binary-search/middle [1 2 3 4 5])
(load-file "test/binary_search_test.clj")
(require 'binary-search-test)
(clojure.test/run-tests 'binary-search-test)
(= 4 4)
(0 [1 2])
(get 0 [1 2])
(load-file "src/binary_search.clj")
(clojure.test/run-tests 'binary-search-test)
(load-file "src/binary_search.clj")
(clojure.test/run-tests 'binary-search-test)
(load-file "src/binary_search.clj")
(clojure.test/run-tests 'binary-search-test)
(load-file "src/binary_search.clj")
(require 'binary-search-test')
(load-file "test/binary_search_test.clj")
(require 'binary-search-test')
(require 'binary-search-testx')
(require 'binary-search-test)
(clojure.test/run-tests 'binary-search-test)
(load-file "src/binary_search.clj")
(load-file "test/binary_search_test.clj")
(require 'binary-search)
(require 'binary-search-test)
(clojure.test/run-tests 'binary-search-test)
(print 5)
(print [1 2 3])
(print 1 2 
)
(clojure.test/run-tests 'binary-search-test)
(load-file "test/binary_search_test.clj")
(require 'binary-search-test)
(clojure.test/run-tests 'binary-search-test)
(load-file "test/binary_search_test.clj")
(clojure.test/run-tests 'binary-search-test)
(load-file "test/binary_search_test.clj")
(require 'binary-search-test)
(clojure.test/run-tests 'binary-search-test)
(binary-search/search-for 3 '(-3 -2 0 1 3 4))
(load-file "src/binary_search.clj")
(binary-search/search-for 3 '(-3 -2 0 1 3 4))
(take 3 [ 1 2 3 4 5 6])
(drop 3 [ 1 2 3 4 5 6])
(div 4 2)
(rem 4 2)
(quot 4 2)
(quot 7 2)
(defn middle [coll]
(quot (count coll) 2))
(middle [1 2 3])
(get 4 [1 2])
(+ nil 4)
(< 4 nil)
(count '(6 8 9 11))
(quot (count '(6 8 9 11)))
(quot (count '(6 8 9 11) 2))
(quot (count '(6 8 9 11) ) 2 )
(get 0 '(1 2 3 4))
(get 0 [1 2 3]_
(get 0 [1 2 3 ])
(get [1 2 3] 0)
(get 0 [1 2 3])
(get [1 2 3] 0 )
(get '(1 2 3) 0)
(get 0 '(1 2 3))
(nth 0 '(1 2 3))
(nth '(1 2 3) 0)
(nth [ 1 2 3] 0)
